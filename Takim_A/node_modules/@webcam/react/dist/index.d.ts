import { RefObject, FC, ReactNode, ComponentPropsWithoutRef } from 'react';
import { UseMediaStreamParams as UseMediaStreamParams$1 } from '@/utils/hooks';
import { GetVideoFrameCanvasOptions, GetWebcamSnapshotOptions, MediaTrackConstraintsOptions } from '@webcam/core';
export { applyMediaStreamConstraints, canGetUserMedia, getDevices, getMediaStream, getMediaStreamConstraints, getVideoFrameCanvas, getWebcamSnapshot, stopMediaStream } from '@webcam/core';

/**
 * Helps get/set the media stream source for a video element
 *
 * @param {RefObject<HTMLVideoElement>} videoRef - video element reference object
 * @param {UseMediaStreamParams} params - parameters for receiving media stream
 * @return {string | undefined} media stream source
 */
declare const useWebcam: (videoRef: RefObject<HTMLVideoElement>, { onStreamStart, onStreamStop, ...params }?: UseMediaStreamParams$1) => {
    start: (stream: MediaStream) => void;
    stop: (stream?: MediaStream) => void;
    source: string | undefined;
};

type VideoElementProps = Omit<ComponentPropsWithoutRef<'video'>, 'children'>;
type AvailableUseMediaStreamParams = Omit<UseMediaStreamParams$1, 'disable'>;
type WebcamRenderProps = (options: {
    getCanvas: (options?: GetVideoFrameCanvasOptions) => HTMLCanvasElement | undefined;
    getSnapshot: (options?: GetWebcamSnapshotOptions) => string | undefined;
    videoElement: HTMLVideoElement | null;
}) => ReactNode;
interface BaseWebcamProps extends VideoElementProps {
    children?: ReactNode | WebcamRenderProps;
    innerRef?: RefObject<HTMLVideoElement>;
    mirrored?: boolean;
}
interface WebcamPropsWithInternalStream extends BaseWebcamProps, AvailableUseMediaStreamParams {
    stream?: undefined;
}
interface WebcamPropsWithExternalStream extends BaseWebcamProps {
    stream?: MediaStream;
}
type WebcamProps = WebcamPropsWithInternalStream | WebcamPropsWithExternalStream;
/**
 * Renders the Webcam component and handles the requesting and displaying of the media stream
 *
 * @param {WebcamProps} props - The props for the Webcam component
 * @return {ReactElement} The rendered Webcam component
 */
declare const Webcam: FC<WebcamProps>;

/**
 * Helps request and cancel animation frame
 *
 * @param {Function} callback - frame request callback
 * @param {boolean} active - should animation frame be requested
 * @return {Object} request/cancel animation frame handlers
 */
declare const useAnimationFrame: (callback: (time: number) => void, active?: boolean) => {
    request: (timestamp?: DOMHighResTimeStamp) => void;
    cancel: () => void;
};

interface UseMediaStreamParams extends MediaTrackConstraintsOptions {
    disable?: boolean;
    requestTimeLimit?: number;
    applyConstraints?: boolean;
    audioConstraints?: MediaTrackConstraints;
    videoConstraints?: MediaTrackConstraints;
    onStreamRequest?: () => void;
    onStreamError?: (error: Error) => void;
    onStreamStart?: (stream: MediaStream) => void;
    onStreamStop?: (stream?: MediaStream) => void;
}
/**
 * Returns and manages the media stream in accordance with the passed parameters for configuration
 *
 * @param {UseMediaStreamParams} params - parameters for receiving media stream
 * @return {MediaStream | undefined} media stream instance
 */
declare const useMediaStream: ({ onStreamRequest, onStreamError, onStreamStart, onStreamStop, disable, applyConstraints, requestTimeLimit, videoConstraints, audioConstraints, cameraResolutionMode, cameraResolutionType, frontCamera, mainCamera, muted }?: UseMediaStreamParams) => MediaStream | undefined;

export { Webcam, useAnimationFrame, useMediaStream, useWebcam };
